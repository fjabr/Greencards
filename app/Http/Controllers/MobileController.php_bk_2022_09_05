<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Mail;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Hash;

use Carbon\Carbon;

use PDF;

class MobileController extends Controller
{
    
    public function getInvoice($src){
        
        $url = "https://chart.googleapis.com/chart?chs=300x300&cht=qr&chl=".$src."&choe=UTF-8";
        $img = file_get_contents($url);
        return response($img)->header('Content-type','image/png');
        // $now = Carbon::now();
        
        // //return "hi";
        
        // $sellerNameBuf = $this->getTLVForValue("1", "salah hospital");
        // $vatRegistrationNameBuf = $this->getTLVForValue("2", "31234567890123");
        // $timeStampBuf = $this->getTLVForValue("3", $now);
        // $taxTotalNameBuf = $this->getTLVForValue("4", "1000.00");
        // $taxTotalBuf = $this-> getTLVForValue("6", "150.00");
        
        // $tagsBufsArray = $sellerNameBuf.$vatRegistrationNameBuf.$timeStampBuf.$taxTotalNameBuf.$taxTotalBuf;
        
        // return base64_encode($tagsBufsArray);
    }
    
    private function getTLVForValue($tag,$val)
    {
        $tagBuf = $this->strigToBinary($tag);
        $tagValueLenBuf = $this->strigToBinary(strlen($val));
        $tagValueBuf = $this->strigToBinary($val);
        
     
        return $tagBuf."".$tagValueLenBuf."".$tagValueBuf;    
    }
    
    private function strigToBinary($string)
    {
        $characters = str_split($string);

        $binary = [];
        foreach ($characters as $character) {
            $data = unpack('H*', $character);
            $binary[] = "0".base_convert($data[1], 16, 2);
        }
     
        return implode('', $binary);    
    }
    
    public function getCategories($package_id) {
        $categories = DB::table('categories')
                        ->where('categories.parent_id', 0)
                        // ->join('category_translations', 'categories.id', '=', 'category_translations.category_id')
                        // ->where('category_translations.lang', "en")
                        // ->orWhere('category_translations.lang', 'sa')
                        ->leftJoin('uploads', 'categories.banner', '=', 'uploads.id')
                        ->select('categories.*', "uploads.file_name as banner_url")
                        ->groupby('categories.id')
                        ->get();
        $data = [];
        foreach($categories as $key => $category){
            $cat_en = DB::table('category_translations')->where("category_id", "=" , $category->id)
                        ->where("lang", "=" , "en")->select('category_translations.name as enName')->first();
            $cat_ar = DB::table('category_translations')->where("category_id", "=" , $category->id)
                        ->where("lang", "=" , "sa")->select('category_translations.name as arName')->first();
                        
            // return [$cat_en , $cat_ar];
            if($cat_en != null){
                $category->enName = $cat_en->enName;
            }else{
                $category->enName = null;
            }
            
            if($cat_ar != null){
                $category->arName = $cat_ar->arName;
            }else{
                $category->arName = null;
            }
            
            
            array_push($data, $category);
        }
                        
        if($package_id == 0){
            return response()->json(['status'=>200, 'total_results' => count($data), 'categories'=>$data]);
        }
        $categories_valid = [];
         
        foreach ($categories as $key => $category){
            $packages = explode(",", $category->packages_allowed);
            if(in_array($package_id, $packages)){
                array_push($categories_valid, $category);
            }
        }

        return response()->json(['status'=>200, 'total_results' => count($categories_valid), 'categories'=>$categories_valid]);
    }

    public function getCountries(){
        $countries = DB::table('countries')
                        ->get();

        return response()->json(['status'=>200, "success"=> true, 'total_results' => count($countries), 'countries'=>$countries]);
    }

    public function getPackages(){
        $packages = DB::table('customer_packages')
                        ->join('customer_package_translations', 'customer_packages.id', '=', 'customer_package_translations.customer_package_id')
                        ->where('customer_package_translations.lang', "en")
                        ->select('customer_packages.*', 'customer_package_translations.name as label')
                        ->orderBy('customer_packages.id', 'desc')
                        ->get();

        return response()->json(['status'=>200, 'total_results' => count($packages), 'data'=>$packages]);
    }

    public function login(Request $req){
        $validator = $req->validate([
            'email' => 'required|string',
            'password' => 'required|string',
        ]);

        $user = DB::table('users')
                ->where('email', $req->email)
                ->where('user_type', "customer")
                ->first();
        if($user != null){
            if(Hash::check($req->password, $user->password)){
                return response()->json([
                    'message' => "login successfully",
                    "success" => true,
                    "user" => $user
                ]);
            }else{
                return response()->json([
                    'message' => "invalid email or password",
                    'messageAr' => "البريد الإلكتروني أو كلمة السر خاطئة",
                    "success" => false,
                    "user" => $user
                ]);
            }

        }else{
            return response()->json([
                'message' => "invalid email",
                'messageAr' => "بريد إلكتروني خاطئ",
                "success" => false,
                "user" => null
            ]);
        }
    }

    public function loginGoogle(Request $req){
        $validator = $req->validate([
            'email' => 'required|string',
        ]);

        $user = DB::table('users')
                ->where('email', $req->email)
                ->where('user_type', "customer")
                ->first();
        if($user != null){
            return response()->json([
                'message' => "login successfully",
                "success" => true,
                "user" => $user
            ]);
        }else{
            return response()->json([
                'message' => "invalid email",
                'messageAr' => "بريد إلكتروني خاطئ",
                "success" => false,
                "user" => null
            ]);
        }
    }

    public function signup(Request $req){
        // $validator = $req->validate([
        //     'first_name' => 'required|string',
        //     'last_name' => 'required|string',
        //     'email' => 'required',
        //     'mobile' => 'required',
        //     'gender' => 'required|string',
        //     'date_birth' => 'required|string',
        //     'nationality' => 'required|string',
        //     'country' => 'required|string',
        // ]);


        try {
            $users = DB::table('users')->where('email', $req->email)->get();
            // dd($users);
            if(count($users) > 0){
                return response()->json([
                    'message' => "Registration Failed. Email already exist!.",
                    'messageAr' => "فشل في التسجيل. البريد الالكتروني موجود مسبقا",
                    "error" => "",
                    "success" => false
                ], 201);
            }
            // $password = str_random(8);
            $password = Str::random(8);
            $mobile = str_replace('+', '', $req->mobile) ;

            $user = DB::table('users')->insertGetId(
                [
                    'name' => $req->first_name." ".$req->last_name,
                    "email" => $req->email,
                    "user_type" => "customer",
                    "phone" => $req->mobile,
                    "gender" => $req->gender,
                    "date_birth" => $req->date_birth,
                    "nationality" => $req->nationality,
                    "country" => $req->country,
                    "password" => \bcrypt($password)
                ]
            );

            $data = [
                "email"=> $req->email,
                "password" => $password
            ];

            $to = $req->email;

            try {
                Mail::send('email.signup', $data, function ($messages) use ($to) {
                    $messages->to($to);
                    $messages->subject('WELCOME TO YOUR GREEN CARD');
                });

            } catch (\Throwable $th) {
                //throw $th;
            }

            try {
                $response = $this->sendSMS($req->email, $password, $mobile);
            } catch (\Throwable $th) {
                //throw $th;
            }

            // $response = $this->sendSMS($req->email, $password, $mobile);

            // dd($response);

            // Send SMS
            return response()->json([
                'message' => 'Registration Successful. Please verify and log in to your account.',
                'messageAr' => "تم التسجيل بنجاح. يرجى التحقق وتسجيل الدخول إلى حسابك",
                "success" => true,
                "user" => $user,
                "password" => $password
            ], 201);
        } catch (\Throwable $th) {
            return response()->json([
                'message' => "Registration Failed. Please verify your informations.",
                'messageAr' => "فشل في التسجيل. يرجى التحقق من المعلومات الخاصة بك",
                "error" => $th,
                "success" => false
            ], 201);
        }

    }


    private function sendSMS($login, $password, $mobile) {
        $post = (Object)[
            "userName" => "Gcsms",
            "apiKey" => "e2a372ac1e4afaf53677dbf3192eee12",
            "numbers" => $mobile,
            "userSender"=> "GREENCARD",
            "msg" => "Login: $login\nPassword: $password",
            "msgEncoding" => "UTF8"
        ];
        // dd($post);
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, 'https://www.msegat.com/gw/sendsms.php');
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
            "Cache-Control: no-cache",
            "content-type:application/json;charset=utf-8"
        ));
        $response = curl_exec($ch);
        if(curl_errno($ch)) {
            return curl_error($ch);
        }
        curl_close($ch);
        return $response;
    }

    private function sendMail ($data, $to){
        $pdf = null;
        $d = (object) $data;
        try{
            $pdf = PDF::loadView('email.invoice', [
                'data' => $d,
                'font_family' => "'Roboto','sans-serif'",
            ], [], []);
        }catch (\Throwable $th) {
        }
        
        if($pdf !== null){
            Mail::send('email.email', $data, function ($messages) use ($to, $pdf) {
                $messages->to($to);
                $messages->subject('Invoice Green Card SA')->attachData($pdf->output(), "invoice.pdf");
            });
            
        }else{
            Mail::send('email.email', $data, function ($messages) use ($to) {
                $messages->to($to);
                $messages->subject('Invoice Green Card SA');
            });   
        }

        Mail::send('email.email', $data, function ($messages) use ($to) {
            $messages->to($to);
            $messages->subject('Invoice Green Card SA');
        });
    }

    public function test(){
        return response()->json([
            'message' => "test",
            "success" => false
        ]);
    }

    public function payment(Request $req){

        $validator = $req->validate([
            'first_name' => 'required|string',
            'last_name' => 'required|string',
            'card_type' => 'required|string',
            'card_no' => 'required|string',
            'card_month' => 'required|string',
            'card_year' => 'required|string',
            'card_cvv' => 'required|string',
            'amount' => 'required',
            'qr_code' => 'required',
            "vat_total" => 'required',
            "date_qr" => "required",
            'user' => 'required',
            'package' => 'required'
        ]);

        $name = $req->first_name." ".$req->last_name;

        $customer = DB::table('users')
                            ->where('id', $req->user["id"])
                            ->where('customer_package_id', "!=" , null)
                            ->first();
                            
        if(env("HYPERPAY_ACTIVE") == "on"){
            if($customer == null){
                $responseData = $this->requestPayment($name, $req->card_no, $req->card_month, $req->card_year, $req->card_cvv, $req->amount, $req->card_type);
                $responsePayment = json_decode($responseData, true);
                if(isset($responsePayment['result'])){
                    $res = $responsePayment['result'];
                    if($res['code'] == "000.100.110"){
    
                        $customer_id = null;
                        try {
                            $customer_id = DB::table('customers')->insertGetId([
                                'user_id' => $req->user["id"],
                            ]);
                        } catch (\Throwable $th) {
                        }
                        if($customer_id !== null){
                            DB::table('users')
                            ->where('id', $req->user["id"])
                            ->update(['customer_package_id' => $req->package['id']]);
    
                            $payment_id = DB::table('customer_package_payments')->insertGetId([
                                'user_id' => $req->user["id"],
                                "customer_package_id" => $req->package['id'],
                                "payment_method" => "Bank card",
                                "payment_details" => $responsePayment['id'],
                                "approval" => 1,
                                "offline_payment" => 2,
                                "reciept" => "",
                                "qr_code" => $req->qr_code
                            ]);
    
                            $data = [
                                "user_name" => $req->first_name." ".$req->last_name,
                                "email" => $req->user['email'],
                                "package_name" => $req->package['label'],
                                "package_price" => $req->amount,
                                "date" => $req->date_qr,
                                "invoice_id" => $payment_id,
                                "qr_code" => $req->qr_code,
                                "vat_val" => $req->vat_total
                            ];
                            $to = $req->user['email'];
    
                            try {
                                $this->sendMail($data, $to);
                            } catch (\Throwable $th) {
                            }
    
    
                            return response()->json([
                                'message' => 'Your payment was successful.',
                                'messageAr' => "تم الدفع الخاص بك بنجاح",
                                "success" => true,
                                "exist" => false,
                            ], 200);
                        }
    
                    }else{
                        return response()->json([
                            'message' => 'Your payment was not successful. Please try again.',
                            'messageAr' => "الدفع الخاص بك لم يكن ناجحا. حاول مرة اخرى",
                            "code" => $res['code'],
                            "success" => false
                        ], 200);
                    }
                }
            }else{
                return response()->json([
                    'message' => 'You have already pay.',
                    'messageAr' => "لقد دفعت مسباقا",
                    "success" => true,
                    "exist" => true,
                ], 200);
            }
        }else{
            return response()->json([
                'message' => 'Payment online not active for now, please try again',
                'messageAr' => "الدفع عبر الإنترنت غير نشط في الوقت الحالي ، يرجى المحاولة مرة أخرى",
                "success" => false,
                "exist" => false,
            ], 200);
        }


        // return response()->json([
        //     'message' => 'Your payment was not successful. Please try again.',
        //     "success" => false
        // ], 200);
    }
    
    public function UpdatePayment(Request $req){

        $validator = $req->validate([
            'first_name' => 'required|string',
            'last_name' => 'required|string',
            'card_type' => 'required|string',
            'card_no' => 'required|string',
            'card_month' => 'required|string',
            'card_year' => 'required|string',
            'card_cvv' => 'required|string',
            'amount' => 'required',
            'qr_code' => 'required',
            "vat_total" => 'required',
            "date_qr" => "required",
            'user' => 'required',
            'package' => 'required'
        ]);

        $name = $req->first_name." ".$req->last_name;

        $customer = DB::table('users')
                            ->where('id', $req->user["id"])
                            ->first();
                            
        if(env("HYPERPAY_ACTIVE") == "on"){
           $responseData = $this->requestPayment($name, $req->card_no, $req->card_month, $req->card_year, $req->card_cvv, $req->amount, $req->card_type);
            $responsePayment = json_decode($responseData, true);
            if(isset($responsePayment['result'])){
                $res = $responsePayment['result'];
                if($res['code'] == "000.100.110"){

                    $customer_id = null;
                    try {
                        $customer_id = DB::table('customers')->insertGetId([
                            'user_id' => $req->user["id"],
                        ]);
                    } catch (\Throwable $th) {
                    }
                    if($customer_id !== null){
                        DB::table('users')
                        ->where('id', $req->user["id"])
                        ->update(['customer_package_id' => $req->package['id']]);

                        $payment_id = DB::table('customer_package_payments')->insertGetId([
                            'user_id' => $req->user["id"],
                            "customer_package_id" => $req->package['id'],
                            "payment_method" => "Bank card",
                            "payment_details" => $responsePayment['id'],
                            "approval" => 1,
                            "offline_payment" => 2,
                            "reciept" => "",
                            "qr_code" => $req->qr_code
                        ]);

                        $data = [
                            "user_name" => $req->first_name." ".$req->last_name,
                            "email" => $req->user['email'],
                            "package_name" => $req->package['label'],
                            "package_price" => $req->amount,
                            "date" => $req->date_qr,
                            "invoice_id" => $payment_id,
                            "qr_code" => $req->qr_code,
                            "vat_val" => $req->vat_total
                        ];
                        $to = $req->user['email'];

                        try {
                            $this->sendMail($data, $to);
                        } catch (\Throwable $th) {
                        }


                        return response()->json([
                            'message' => 'Your payment was successful.',
                            'messageAr' => "تم الدفع الخاص بك بنجاح",
                            "success" => true,
                            "exist" => false,
                        ], 200);
                    }

                }else{
                    return response()->json([
                        'message' => 'Your payment was not successful. Please try again.',
                        'messageAr' => "الدفع الخاص بك لم يكن ناجحا. حاول مرة اخرى",
                        "code" => $res['code'],
                        "success" => false
                    ], 200);
                }
            }
        }else{
            return response()->json([
                'message' => 'You have already pay.',
                'messageAr' => "لقد دفعت مسباقا",
                "success" => true,
                "exist" => true,
            ], 200);
        }


        // return response()->json([
        //     'message' => 'Your payment was not successful. Please try again.',
        //     "success" => false
        // ], 200);
    }

    private function requestPayment($name, $card_no, $card_month, $card_year, $card_cvv, $amount, $type_card) {
        if(env("HYPERPAY_MODE_TEST", false)){
            $url = "https://eu-test.oppwa.com/v1/payments";
        }else{
            $url = "https://eu-prod.oppwa.com/v1/payments";
        }

        $data = "entityId=".env('HYPERPAY_ID', '8a8294174b7ecb28014b9699220015ca') .
                    "&amount=".$amount .
                    "&currency=".env("HYPERPAY_CURRENCY", "EUR") .
                    "&paymentBrand=".$type_card.
                    "&paymentType=DB" .
                    "&card.number=".$card_no .
                    "&card.holder=".$name .
                    "&card.expiryMonth=".$card_month .
                    "&card.expiryYear=".$card_year .
                    "&card.cvv=".$card_cvv;

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
                       'Authorization:Bearer '.env("HYPERPAY_TOKEN", "OGE4Mjk0MTc0YjdlY2IyODAxNGI5Njk5MjIwMDE1Y2N8c3k2S0pzVDg=")));
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, (bool) env("HYPERPAY_SSL", false));// this should be set to true in production
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $responseData = curl_exec($ch);
        if(curl_errno($ch)) {
            return curl_error($ch);
        }
        curl_close($ch);
        return $responseData;
    }

    public function getShops($id){
        $shops = DB::table('shops')
                        ->where('category_id', $id)
                        ->leftJoin('uploads', 'shops.logo', '=', 'uploads.id')
                        ->select('shops.*', 'uploads.file_name as logo_url')
                        ->get();

        return response()->json(['status'=>200, 'total_results' => count($shops), 'shops'=>$shops]);
    }
    
    public function getShop($id){
        $shop = DB::table('shops')
                        ->where('id', $id)
                        ->first();
                        
        if($shop != null){
            $ids = explode(" ", $shop->sliders);
            $tags = explode(",", $shop->meta_description);
            $menus = explode("|", $shop->menu);
            // array_push($ids, $shop->id);
            $images = [];
            $sliders = DB::table('uploads')
                        ->whereIn('id', $ids)
                        ->select("file_name as url")
                        ->get();
                        
            foreach($sliders as $sld){
                array_push($images, $sld->url);
            }
            $rate = rand(1, 3);
            $shop->images = $images;
            $shop->tags = $tags;
            $shop->rating = $rate;
            $shop->menus = $menus;
        }

        return response()->json(['status'=>200, 'success'=>true, 'shop'=>$shop]);
    }
    
    public function getShopsByLocation(Request $req){
        $shops = [];
        if($req->lat != null && $req->long != null){
            $shops = DB::table('shops')
                    ->whereBetween('latitude', [$req->lat-10, $req->lat+10])
                    ->whereBetween('longitude', [$req->long-10, $req->long+10])
                    ->leftJoin('uploads', 'shops.logo', '=', 'uploads.id')
                    ->select('shops.*', 'uploads.file_name as logo_url')
                    ->get();
                    
            return response()->json(['status'=>200, 'total_results' => count($shops), 'shops'=>$shops]);
        }
        return response()->json(['status'=>200, 'total_results' => count($shops), 'shops'=>$shops]);
    }
    
    public function getShopsByName(Request $req){
        $shops = [];
        if($req->name != null){
            $shops = DB::table('shops')
                    ->where('name', "like", '%' .$req->name. '%')
                    ->leftJoin('uploads', 'shops.logo', '=', 'uploads.id')
                    ->select('shops.*', 'uploads.file_name as logo_url')
                    ->get();
                    
            return response()->json(['status'=>200, 'total_results' => count($shops), 'shops'=>$shops]);
        }
        return response()->json(['status'=>200, 'total_results' => count($shops), 'shops'=>$shops]);
    }
    
    
    public function sendSmsTest(){
        $to = "212679869523";
        $text = "Your Code: 1234";
        $url = "https://www.msegat.com/gw/sendsms.php";
        $data = [
            "apiKey" => env('MSEGAT_API_KEY'),
            "numbers" => $to,
            "userName" => env('MSEGAT_USERNAME'),
            "userSender" => env('MSEGAT_USER_SENDER'),
            "msg" => $text
        ];
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        $response = curl_exec($ch);
        curl_close($ch);
        return $response;
    }
    


    public function getOffers($id, $id_user){

        $offers = DB::table('offers')
                        ->where('id_shop', $id)
                        ->where('is_active', 1)
                        ->get();
        $data = [];
        foreach ($offers as $offer){
            $nb_usage = DB::table('offers_scanned')
            ->where('offer_id', $offer->id)
            ->where('user_id', $id_user)->count();
            $offer->nb_usage = $nb_usage;
            array_push($data, $offer);
        }

        return response()->json(['status'=>200, "success" => true, 'total_results' => count($data), 'offers'=>$data]);
    }

    public function resetPasssword(Request $req){
        $req->validate([
            'email' => 'required',
        ]);

        $user = DB::table('users')
        ->where("email", $req->email)->first();
        if($user != null){
            $password = Str::random(8);
            $affected = DB::table('users')
                ->where('email', $req->email)
                ->update(['password' => \bcrypt($password)]);

            if($affected){
                $data = [
                    "email"=> $req->email,
                    "password" => $password
                ];

                $to = $req->email;
                try {
                    Mail::send('email.reset', $data, function ($messages) use ($to) {
                        $messages->to($to);
                        $messages->subject('GREEN CARD | RESET YOUR PASSWORD');
                    });

                } catch (\Throwable $th) {
                    //throw $th;
                }

                return response()->json([
                    'status'=>200,
                    "success" => true,
                    'message'=> "Password reset successfully, check your email",
                    'messageAr' => "إعادة تعيين كلمة المرور بنجاح ، تحقق من بريدك الإلكتروني",
                ]);
            }

            return response()->json([
                'status'=>200,
                "success" => true,
                'message'=> "Password reset not successfully",
                'messageAr' => "لم يتم إعادة تعيين كلمة المرور بنجاح",
            ]);

        }

        return response()->json([
            'status'=>200,
            "success" => false,
            'message'=> "Email not exist",
            'messageAr' => "البريد الالكتروني غير موجود",
        ]);
    }

    public function scanOffer(Request $req){
        $req->validate([
            'user_id' => 'required',
            'offer_id' => 'required',
            'limit_user' => 'required',
        ]);

        if($req->limit_user){
            $offers = DB::table('offers_scanned')
                        ->where('user_id', $req->user_id)
                        ->where('offer_id', $req->offer_id)
                        ->get();

            if($req->nb_limit > count($offers)){
                $id = DB::table('offers_scanned')->insertGetId(
                        [
                            'user_id' => $req->user_id,
                            'offer_id' => $req->offer_id,
                            "approved" => 1
                        ]
                    );

                if($id != null){
                    $offer = DB::table('offers')
                        ->where('id', $req->offer_id)
                        ->first();
                    if($offer != null){
                        $nb_points = $offer->nb_points;
                            DB::table('users')
                            ->where('id', $req->user_id)
                            ->increment('nb_points', $nb_points);
                    }
                    return response()->json([
                        'status'=>200,
                        "success" => true,
                        'msg'=>"offer saved",
                        'msgAr' => "تم حفظ العرض الخاص بك",
                        'remaining' => $req->nb_limit - (count($offers)+1)
                    ]);
                }
                return response()->json([
                    'status'=>200,
                    "success" => false,
                    'msg'=> "offer not valid",
                    'msgAr' => "العرض غير صالح",
                ]);
            }

            return response()->json([
                'status'=>200,
                "success" => false,
                'msg'=> "limit usage",
                'msgAr' => "الحد من الاستخدام",
            ]);
        }

        $id = DB::table('offers_scanned')->insertGetId(
                    [
                        'user_id' => $req->user_id,
                        'offer_id' => $req->offer_id,
                        "approved" => 1
                    ]
                );

        if($id != null){
            $offer = DB::table('offers')
                ->where('id', $req->offer_id)
                ->first();
            if($offer != null){
                $nb_points = $offer->nb_points;
                    DB::table('users')
                    ->where('id', $req->user_id)
                    ->increment('nb_points', $nb_points);
            }
            return response()->json([
                'status'=>200,
                "success" => true,
                'msg'=>"offer saved",
                'msgAr' => "تم حفظ العرض الخاص بك",
            ]);
        }
        return response()->json([
            'status'=>200,
            "success" => false,
            'msg'=> "offer not valid",
            'msgAr' => "العرض غير صالح",
        ]);

    }

    public function approveScanOffer(Request $req){

        $req->validate([
            'user_id' => 'required',
            'offer_id' => 'required',
            'offer_scanned_id' => 'required',
        ]);

        $status = DB::table('offers_scanned')
                    ->where('id', $req->offer_scanned_id)
                    ->where('user_id', $req->user_id)
                    ->where('offer_id', $req->offer_id)
                    ->update(['approved' => 1]);

        if($status){
            $offer = DB::table('offers')
                        ->where('id', $req->offer_id)
                        ->first();
            if($offer != null){
                if($offer->ilimitless_usage == 1){
                    $nb_points = $offer->nb_points;
                    DB::table('users')
                    ->where('id', $req->user_id)
                    ->increment('nb_points', $nb_points);
                    return response()->json(['status'=>200, "success" => true, 'msg'=>"offer approved", 'ilimitless_usage' => true]);
                }else{
                    $offers = DB::table('offers_scanned')
                        ->where('user_id', $req->user_id)
                        ->where('offer_id', $req->offer_id)
                        ->get();
                    if(count($offers) <= $offer->member_of_usage){
                        $nb_points = $offer->nb_points;
                        DB::table('users')
                        ->where('id', $req->user_id)
                        ->increment('nb_points', $nb_points);
                        return response()->json(['status'=>200, "success" => true, 'msg'=>"offer approved", 'remaining' => $offer->member_of_usage - count($offers)]);
                    }
                    return response()->json(['status'=>200, "success" => false, 'msg'=>"limit scan", 'remaining' => $offer->member_of_usage - count($offers)]);
                }

            }
            return response()->json(['status'=>200, "success" => true, 'msg'=>"offer approved"]);
        }
        return response()->json(['status'=>200, "success" => false, 'msg'=> "offer not valid"]);
    }

    public function CancelScanOffer(Request $req){
        $req->validate([
            'user_id' => 'required',
            'offer_id' => 'required',
            'offer_scanned_id' => 'required',
        ]);

        $is_approved = DB::table('offers_scanned')
                    ->where('id', $req->offer_scanned_id)->first();

        $status = DB::table('offers_scanned')
                    ->where('id', $req->offer_scanned_id)
                    ->where('user_id', $req->user_id)
                    ->where('offer_id', $req->offer_id)
                    ->update(['approved' => 0]);

        if($status && $is_approved != null){
            $offer = DB::table('offers')
                        ->where('id', $req->offer_id)
                        ->first();
            if($offer != null){
                $nb_points = $offer->nb_points;
                if($is_approved->approved == 1){
                    DB::table('users')
                    ->where('id', $req->user_id)
                    ->decrement('nb_points', $nb_points);
                }
                return response()->json(['status'=>200, "success" => true, 'msg'=>"offer disabled"]);
            }
            return response()->json(['status'=>200, "success" => true, 'msg'=>"offer not valid, scan disabled"]);
        }
        return response()->json(['status'=>200, "success" => false, 'offers'=> "offer not valid"]);
    }

    public function refuseScanOffer(Request $req){
        $req->validate([
            'user_id' => 'required',
            'offer_id' => 'required',
            'offer_scanned_id' => 'required',
        ]);

        $is_approved = DB::table('offers_scanned')
                    ->where('id', $req->offer_scanned_id)->first();

        $status = DB::table('offers_scanned')
                    ->where('id', $req->offer_scanned_id)
                    ->where('user_id', $req->user_id)
                    ->where('offer_id', $req->offer_id)
                    ->update(['approved' => -1]);

        if($status && $is_approved != null){
            $offer = DB::table('offers')
                        ->where('id', $req->offer_id)
                        ->first();
            if($offer != null){
                $nb_points = $offer->nb_points;
                if($is_approved->approved == 1){
                    DB::table('users')
                    ->where('id', $req->user_id)
                    ->decrement('nb_points', $nb_points);
                }
                return response()->json(['status'=>200, "success" => true, 'msg'=>"offer disabled"]);
            }
            return response()->json(['status'=>200, "success" => true, 'msg'=>"offer not valid, scan disabled"]);
        }
        return response()->json(['status'=>200, "success" => false, 'offers'=> "offer not valid"]);
    }

    public function getOrders($id) {
        $orders = DB::table('offers_scanned')
                    ->where('offers_scanned.user_id', $id)
                    ->join('offers', "offers.id" , "=", "offers_scanned.offer_id")
                    ->join('shops', "shops.id" , "=", "offers.id_shop")
                    ->orderby("offers_scanned.created_at", "desc")
                    ->select('offers.*', 'offers_scanned.*', 'offers_scanned.id as parant_id', "shops.name as shop_name")
                    ->get();

        return response()->json(['status'=>200, "success" => true, "total" => count($orders), 'orders'=>$orders]);
    }

    public function getPackage($id){
        $package = DB::table('customer_packages')
                    ->where('customer_packages.id', $id)
                    ->leftJoin('uploads', "customer_packages.logo" , "=", "uploads.id")
                    ->join('customer_package_translations', 'customer_packages.id', '=', 'customer_package_translations.customer_package_id')
                    ->where('customer_package_translations.lang', "en")
                    ->select('customer_packages.*', 'uploads.file_name as url_logo', 'customer_package_translations.name as label')
                    ->first();

        return response()->json(['status'=>200, "success" => true, 'package'=>$package]);
    }

    public function getUser($id) {
        $user = DB::table('users')
                    ->where('users.id', $id)
                    ->leftJoin('uploads', "users.avatar" , "=", "uploads.id")
                    ->select('users.*', 'uploads.file_name as url_avatar')
                    ->first();

        return response()->json(['status'=>200, "success" => true, 'user'=>$user]);
    }

    public function getFamily($id){


        $users = DB::table('users')->where('parant_id', $id)->get();

        return response()->json([
            'total' => count($users),
            "success" => true,
            "users" => $users,
        ], 201);

    }

    public function deleteFamily(Request $req){

        $validator = $req->validate([
            'parant_id' => 'required',
            'id' => 'required',
        ]);

        $status = DB::table('users')
        ->where('id', $req->id)
        ->where('parant_id', $req->parant_id)
        ->delete();

        $users = DB::table('users')->where('parant_id', $req->parant_id)->get();

        return response()->json([
            'total' => count($users),
            "success" => true,
            "users" => $users,
        ], 201);

    }

    public function addFamily(Request $req){
        $validator = $req->validate([
            'parant_id' => 'required',
            'customer_package_id' => 'required',
            'first_name' => 'required|string',
            'last_name' => 'required|string',
            'email' => 'required|string|email',
            'mobile' => 'required',
            'gender' => 'required|string',
            'date_birth' => 'required|string',
            
        ]);


        try {
            $users = DB::table('users')->where('email', $req->email)->get();
            // dd($users);
            if(count($users) > 0){
                return response()->json([
                    'message' => "Registration Failed. Email already exist!.",
                    'messageAr' => "فشل في التسجيل. البريد الالكتروني موجود مسبقا",
                    "error" => "",
                    "success" => false
                ], 201);
            }
            
            $password = Str::random(8);
            $mobile = str_replace('+', '', $req->mobile) ;

            $user = DB::table('users')->insertGetId(
                [
                    'parant_id' => $req->parant_id,
                    'customer_package_id' => $req->customer_package_id,
                    'name' => $req->first_name." ".$req->last_name,
                    "email" => $req->email,
                    "phone" => $req->mobile,
                    "gender" => $req->gender,
                    "date_birth" => $req->date_birth,
                    "password" => \bcrypt($password)
                ]
            );

            $data = [
                "email"=> $req->email,
                "password" => $password
            ];

            $to = $req->email;

            try {
                Mail::send('email.signup', $data, function ($messages) use ($to) {
                    $messages->to($to);
                    $messages->subject('WELCOME TO YOUR GREEN CARD');
                });

            } catch (\Throwable $th) {
                //throw $th;
            }

            try {
                $response = $this->sendSMS($req->email, $req->password, $req->mobile);
            } catch (\Throwable $th) {
                //throw $th;
            }

            // $response = $this->sendSMS($req->email, $password, $mobile);

            // dd($response);

            // Send SMS
            return response()->json([
                'message' => 'Registration Successful.',
                'messageAr' => "تم التسجيل بنجاح",
                "success" => true,
                "user" => $user,
            ], 201);
        } catch (\Throwable $th) {
            return response()->json([
                'message' => "Registration Failed.",
                'messageAr' => "فشل في التسجيل",
                "error" => $th,
                "success" => false
            ], 201);
        }
    }
    
    public function updateFamily(Request $req){
        $validator = $req->validate([
            'id' => 'required',
            'first_name' => 'required|string',
            'last_name' => 'required|string',
            'email' => 'required|string|email',
            'mobile' => 'required',
            'gender' => 'required|string',
            'date_birth' => 'required|string',
            
        ]);


        try {
            

            $user = DB::table('users')
                ->where('id', $req->id)
                ->update(
                [
                    'name' => $req->first_name." ".$req->last_name,
                    "email" => $req->email,
                    "phone" => $req->mobile,
                    "gender" => $req->gender,
                    "date_birth" => $req->date_birth,
                ]
            );


            return response()->json([
                'message' => 'Update successfully',
                'messageAr' => "تم االتحديث بنجاح",
                "success" => true,
                "user" => $user,
            ], 201);
        } catch (\Throwable $th) {
            return response()->json([
                'message' => "Update Failed.",
                'messageAr' => "فشل في  التحديث",
                "error" => $th,
                "success" => false
            ], 201);
        }
    }


    public function getProducts(){

        $products = DB::table('products')
                    ->leftJoin('uploads', "products.thumbnail_img" , "=", "uploads.id")
                    ->where("products.earn_point",">", 0)
                    ->select('products.*', 'uploads.file_name as url_product')
                    ->get();

        return response()->json(['status'=>200, "success" => true, 'total'=>count($products), 'products'=>$products]);
    }
    
    public function getWishlists($id){
        $shops = DB::table('wishlists_shops')
                    ->where("wishlists_shops.user_id", $id)
                    ->join("shops", "wishlists_shops.shop_id", "=", "shops.id")
                    ->leftJoin('uploads', "shops.logo" , "=", "uploads.id")
                    ->select('wishlists_shops.id as wish_id', 'shops.*', 'uploads.file_name as url_logo')
                    ->get();

        return response()->json(['status'=>200, "success" => true, 'total'=>count($shops), 'data'=>$shops]);
    }
    
    public function deleteFromWishLists($id){
        $delete = DB::table('wishlists_shops')->where('id', $id)->delete();
        
        if($delete){
            return response()->json([
                'message' => 'Your item deleted successfully.',
                'messageAr' => "تم حذف العنصر الخاص بك بنجاح",
                "success" => true,
            ], 201);
        }
        
        return response()->json([
                'message' => 'Your item not deleted try again.',
                'messageAr' => "لم يتم حذف العنصر الخاص بك حاول مرة أخرى",
                "success" => false,
            ], 201);
    }
    
    public function AddToWishlists(Request $req){
         
        $shops = DB::table('wishlists_shops')
                    ->where("user_id", $req->user_id)
                    ->where("shop_id", $req->shop_id)
                    ->get();
        
        if(count($shops) > 0){
            return response()->json([
                'message' => 'Your shop already exist on wishlist.',
                'messageAr' => "متجرك موجود بالفعل في قائمة الرغبات",
                "success" => true,
            ], 201);
        }
        $insert = DB::table('wishlists_shops')->insert(
                    [
                        'user_id' => $req->user_id,
                        'shop_id' => $req->shop_id
                    ]
                );
                
        if($insert){
            return response()->json([
                'message' => 'Shop added to wishlist successfully.',
                'messageAr' => "تم تمت إضافة المتجر إلى قائمة الرغبات بنجاح",
                "success" => true,
            ], 201);
        }
        
        return response()->json([
                'message' => 'Your shop not added to wishlist try again.',
                'messageAr' => "تم تمت إلم يتم إضافة متجرك إلى قائمة الرغبات حاول مرة أخرى",
                "success" => false,
            ], 201);

       
    }
    
    public function getNotifications($id){
        $notifications = DB::table('notifications_mobile')->orderBy('created_at', 'desc')->get();
        
        $data = [];
        foreach($notifications as $notif){
            if($notif->for_all == 1){
                array_push($data, $notif);
            }else{
                $users = explode(",",$notif->users);
                if(in_array($id, $users)){
                    array_push($data, $notif);
                }
            }
        }

        return response()->json(['status'=>200, "success" => true, 'total'=>count($data), 'data'=>$data]);
    }
    
    public function ShopsByTypeOffers($type){
        $list_types = [];
        $types_offers = DB::table("offers_types")
                        ->where("name", "like", $type)
                        ->get();
        foreach($types_offers as $tf){
            array_push($list_types, $tf->id);
        }
        
        $shops = DB::table("shops")
                ->join("offers", "shops.id", "=", "offers.id_shop")
                ->leftJoin('uploads', "shops.logo" , "=", "uploads.id")
                ->whereIn("offers.type_id", $list_types)
                ->select('shops.*', 'uploads.file_name as logo_url')
                ->groupBy('shops.id')
                ->get();
                
        return response()->json(['status'=>200, "success" => true, 'total'=>count($shops), 'shops'=>$shops]);
    }
    
    public function updateUser(Request $req){
        $affected = DB::table("users")->where("id", $req->id)
        ->update([
            "email" => $req->email,
            "date_birth" => $req->date_birth
        ]);
        
        if($affected){
            return response()->json([
                'message' => 'Your information was updated successfully',
                'messageAr' => "تم تحديث المعلومات الخاصة بك بنجاح",
                "success" => true,
            ], 201);
        }else{
            return response()->json([
                'message' => 'Your information not updated! try again',
                'messageAr' => "لم يتم تحديث المعلومات الخاصة بك! حاول مرة أخرى",
                "success" => true,
            ], 201);
        }
    }
    
    public function updatePwd(Request $req){
        $affected = DB::table("users")->where("id", $req->id)
        ->update(['password' => \bcrypt($req->pwd)]);
        
        if($affected){
            return response()->json([
                'message' => 'Your information was updated successfully',
                'messageAr' => "تم تحديث المعلومات الخاصة بك بنجاح",
                "success" => true,
            ], 201);
        }else{
            return response()->json([
                'message' => 'Your information not updated! try again',
                'messageAr' => "لم يتم تحديث المعلومات الخاصة بك! حاول مرة أخرى",
                "success" => true,
            ], 201);
        }
    }
    

    
    public function updateLocationUser(Request $req){
        $affected = DB::table("users")->where("id", $req->id)
        ->update([
            "country" => $req->country,
        ]);
        
        if($affected){
            return response()->json([
                'message' => 'Your information was updated successfully',
                'messageAr' => "تم تحديث المعلومات الخاصة بك بنجاح",
                "success" => true,
            ], 201);
        }else{
            return response()->json([
                'message' => 'Your information not updated! try again',
                'messageAr' => "لم يتم تحديث المعلومات الخاصة بك! حاول مرة أخرى",
                "success" => true,
            ], 201);
        }
    }
    
    public function getCoupons($id){
        $coupons = DB::table("coupons")->where("user_id", $id)->get();
        return response()->json([
            'coupons' => $coupons,
            "success" => true,
        ], 201);
    }
    
    public function getBranches($id){
        $branches = DB::table("branches")->where("shop_id", $id)->get();
        return response()->json([
            'branches' => $branches,
            "success" => true,
        ], 201);
    }
    
    /** 
     * Saim's Work
    */
    
        public function getNotifications($id){
        $notifications = DB::table('notifications_mobile')->orderBy('created_at', 'desc')->get();
        
        $data = [];
        foreach($notifications as $notif){
            if($notif->for_all == 1){
                $seen_by = $users = explode(",",$notif->seen_by);
                    if(in_array($id, $seen_by)){
                        $notif->seen = true;
                        array_push($data, $notif);
                    }else{
                        $notif->seen = false;
                        array_push($data, $notif);
                    }
                // array_push($data, $notif);
            }else{
                $users = explode(",",$notif->users);
                if(in_array($id, $users)){
                    $seen_by = $users = explode(",",$notif->seen_by);
                    if(in_array($id, $seen_by)){
                        $notif->seen = true;
                        array_push($data, $notif);
                    }else{
                        $notif->seen = false;
                        array_push($data, $notif);
                    }
                }
            }
        }
        return response()->json(['status'=>200, "success" => true, 'total'=>count($data), 'data'=>$data]);
    }
    
    public function getTerms($id){
        $terms = DB::table('sellers_terms')->where('shop_id', $id)->first();
        
         return response()->json([
            // 'branches' => $branches,
            'terms'=> $terms,
            "success" => true,
        ], 201);
        
    }
    
    public function getNearbyShops(Request $req){
        $shops = DB::table('shops')
        
                        ->where('category_id', $req->category_id)
                        
                        ->leftJoin('uploads', 'shops.logo', '=', 'uploads.id')
                        ->select("shops.*",'uploads.file_name as logo_url', \DB::raw("6371 * acos(cos(radians(" . $req->lat . "))
     * cos(radians(shops.latitude)) 
     * cos(radians(shops.longitude) - radians(" . $req->lng . ")) 
     + sin(radians(" .$req->lat. ")) 
     * sin(radians(shops.latitude))) AS distance"))
     ->having('distance', '<', 5)
                        // ->select('shops.*', 'uploads.file_name as logo_url')
                        ->get();

        return response()->json(['status'=>200, 'total_results' => count($shops), 'shops'=>$shops]);
    }
    
    public function seenNotification(Request $req){
        $id = $req->id;
        $notifications = DB::table('notifications_mobile')->orderBy('created_at', 'desc')->get();
        
        $data = [];
        $affected= false;
        foreach($notifications as $notif){
            $seen_by = explode(",",$notif->seen_by);
            if($notif->for_all == 1 && !in_array($id, $seen_by)){
                array_push($seen_by, $id);
                $seen_by = implode(",", $seen_by);
                $affected = DB::table("notifications_mobile")->where("id", $notif->id)
                            ->update([
                                "seen_by" => $seen_by,
                            ]);
                    
            }else{
                $users = explode(",",$notif->users);
                // $seen_by = $users = explode(",",$notif->seen_by);
                if(in_array($id, $users)&&!in_array($id, $seen_by)){
                    array_push($seen_by, $id);
                    $seen_by = implode(",", $seen_by);
                    $affected = DB::table("notifications_mobile")->where("id", $notif->id)
                            ->update([
                                "seen_by" => $seen_by,
                            ]);
                }
            }
        }
        
        
        
           
             return response()->json([
                'message' => 'Your information was updated successfully',
                'messageAr' => "تم تحديث المعلومات الخاصة بك بنجاح",
                "success" => true,
            ], 201);
        
    }
    
    public function hyperpay(Request $req) {

        $url = "https://test.oppwa.com/v1/payments";
     if($req->card_type == 'VISA'){
                        $data = "entityId=".env('HYPERPAYVISA_ENTITYID');
                    }else if($req->card_type == 'MASTER'){
                        $data = "entityId=".env('HYPERPAY_ENTITYID');
                    }else if($req->card_type == 'APPLEPAY'){
                        $data = "entityId=".env('HYPERPAYAPPLEPAY_ENTITYID');
                    }else if($req->card_type == 'AMEX'){
                        $data = "entityId=".env('HYPERPAY_ENTITYID');
                    }else if($req->card_type == 'MADA'){
                        $data = "entityId=".env('HYPERPAY_ENTITYID');
                    }
                    $data .= "&amount=".$req->amount .
                    "&currency=SAR" .
                    "&paymentBrand=". $req->card_type .
                    // "&paymentType=DB" .
                    "&card.number=". $req->card_number .
                    "&card.holder=". $req->first_name. " ". $req->last_name .
                    "&card.expiryMonth=". $req->exp_month .
                    "&card.expiryYear=". $req->exp_year ;
                    
                    if($req->card_type == 'VISA'){
                        $data .= "&card.cvv=". $req->cvv .
                        "&paymentType=DB" .  
                        "&standingInstruction.mode=INITIAL" .
                    "&standingInstruction.source=CIT" .
                    "&createRegistration=true";
                    }else if($req->card_type == 'MASTER'){
                        $data .="&card.cvv=". $req->cvv . "&paymentType=DB";
                    }else if($req->card_type == 'APPLEPAY'){
                        $data .="&paymentType=PA" .
                        "&threeDSecure.verificationId=ABiKYvXjhcB7AAc+K04XAoABFA==" .
                    "&threeDSecure.eci=07" .
                    "&applePay.source=web";
                    }else if($req->card_type == 'AMEX'){
                        $data .="&card.cvv=". $req->cvv . "&paymentType=DB";
                    }else if($req->card_type == 'MADA'){
                        $data .= "entityId=".env('HYPERPAY_ENTITYID') ."&card.cvv=". $req->cvv .
                        "&paymentType=PA" .
                        "&testMode=EXTERNAL";
                    }
    
    
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        if($req->card_type == 'VISA'){
                       curl_setopt($ch, CURLOPT_HTTPHEADER, array(
                       'Authorization:Bearer '.env('HYPERPAYVISA_ACCESS_TOKEN')));
                    }else if($req->card_type == 'MASTER'){
                       curl_setopt($ch, CURLOPT_HTTPHEADER, array(
                       'Authorization:Bearer '.env('HYPERPAY_ACCESS_TOKEN')));
                    }else if($req->card_type == 'APPLEPAY'){
                      curl_setopt($ch, CURLOPT_HTTPHEADER, array(
                       'Authorization:Bearer '.env('HYPERPAYAPPLEPAY_ACCESS_TOKEN')));
                    }else if($req->card_type == 'AMEX'){
                      curl_setopt($ch, CURLOPT_HTTPHEADER, array(
                       'Authorization:Bearer '.env('HYPERPAY_ACCESS_TOKEN')));
                    }else if($req->card_type == 'MADA'){
                      curl_setopt($ch, CURLOPT_HTTPHEADER, array(
                       'Authorization:Bearer '.env('HYPERPAY_ACCESS_TOKEN')));
                    }
    // 	curl_setopt($ch, CURLOPT_HTTPHEADER, array(
    //                   'Authorization:Bearer OGE4Mjk0MTc0YjdlY2IyODAxNGI5Njk5MjIwMDE1Y2N8c3k2S0pzVDg='));
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);// this should be set to true in production
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $responseData = curl_exec($ch);
        if(curl_errno($ch)) {
            return curl_error($ch);
        }
        curl_close($ch);
        $responseData = json_decode($responseData);
        $responseData->success = true ;
          return $responseData;
       }
    
    
    
    // end Saim's Work

}
